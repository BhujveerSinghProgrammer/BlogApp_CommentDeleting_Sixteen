//...............................................................................................................................................
//..............................................................................................................................................
Q1. Ternary Operator use in js:-


  const[login,setLogin]=useState(false);
  const[user,setUser]=useState(undefined);

useEffect(()=>
  {
    setLogin(isLoggedIn())
    setUser(CurrentUser())
    console.log('a user',user);
    console.log('b login',login);
  },[login]
  );

{/* we will show delete button when user is loggedIn else will not show */}
{login && user.Id==post.userId?
<Button onClick={DoDeletePost} color='danger'  className='ms-2' style={{ height: '19px ',width: '76px ',padding: '0px ', fontSize:'11px',color:'Yellow'}}>Delete</Button> :''
}
   


Note:- If login is true and "user.Id"=="post.userId" then show a button else show ""

//...............................................................................................................................................
//..............................................................................................................................................

Q2:-//Steps to perform Deleting Comment ?




Step 1:- post-service.js:-

//get posts by pagenumber and pazesize and userId

export const loadAllPostsByuserId=(PageNumberInput,PageSizeInput,userId)=>{
  return myAxious.get(`/api/ReactJsApis/getPostsByUserId?PageNumberInput=${PageNumberInput}&PageSizeInput=${PageSizeInput}&userId=${userId}`).then(response=>response.data); 
}



//Delete Posts

export const DeletePost=(postData)=>{
  console.log('the Deleted data' + postData);
  return privateAxious.post('/api/ReactJsApis/DeletePostContent',postData).then((response)=>response.data);
}



//


Step 2:-
pages-->user-routes-->Userdashboard.jsx:-


import React, { useEffect, useState } from 'react'
import Base from '../../components/Base';
import AddPost from '../../components/AddPost';
import { Row, Col, Container } from 'reactstrap';
import {CurrentUser} from '../../auth/index';
import { loadAllPostsByuserId } from '../../services/post-service';
import { toast } from 'react-toastify';
import Posts from '../../components/Posts';
import InfiniteScroll from 'react-infinite-scroll-component';

const  Userdashboard=()=> {

const[user,setUser]=useState({})

   const [postContent, setPostContent] = useState({
    Contents: [],
    LastPage: 0,
    PageNumber: 1,  // Start at page 1 (1-based)
    PageSize: 10,   // Default page size
    TotalElements: 0,
    TotalPages: 0
  });

  const [currentPage, setCurrentPage] = useState(1);

  // Fetch paged posts when the page is first loaded or page changes
  useEffect(() => {
    setUser(CurrentUser());
    changePage(currentPage);
  }, [currentPage]);

  // Handle page change
  const changePage = (pageNumber) => {
    // Skip if the page number exceeds TotalPages (unless TotalPages is 0 or undefined)
    //Note:- postContent.TotalPages is greater than 0 and "pageNumber" is greater than "postContent.TotalPages" then return the function,
    //Note:-if we want this "pageNumber > postContent.TotalPages" condition true and then return,then
    //we will use it with "postContent.TotalPages>0" condition becoz on initial load "TotalPages" will be zero.

    if (postContent.TotalPages > 0 && pageNumber > postContent.TotalPages) {
      return;
    }

    loadAllPostsByuserId(pageNumber, postContent.PageSize,CurrentUser().Id)
      .then((data) => {
        console.log('data to ram ji', data);
        // Only append posts that are not already in Contents to avoid duplicates
        setPostContent((prevState) => ({
          Contents: pageNumber === 1 ? data.Contents : [...prevState.Contents, ...data.Contents],
          //if page ===1 then use "data.Contents" directly else use "[...prevState.Contents, ...data.Contents]" to append with existing data.  
          LastPage: data.LastPage,
          PageNumber: data.PageNumber,
          PageSize: data.PageSize,
          TotalElements: data.TotalElements,
          TotalPages: data.TotalPages
        }));
      })
      .catch((error) => {
        toast.error('Error in loading posts pagewise');
      });
  };

  const changePageInfinite = () => {
    // Increment the current page to load the next page of content

    if (currentPage < postContent.TotalPages || postContent.TotalPages === 0) {
      setCurrentPage((prevPage) => prevPage + 1);
    }
  };
  return (
    <Base>
    <Container>
         <AddPost/>
           <div className="container-fluid">
      <Row>
        <Col md={{ size: 12}}>
          <h3>Blogs Count ({postContent?.TotalElements})</h3>

          <InfiniteScroll
            dataLength={postContent?.Contents?.length}
            next={changePageInfinite}
            hasMore={postContent?.PageNumber < postContent?.TotalPages || postContent?.TotalPages === 0}
            loader={<h4>Loading...</h4>}
            endMessage={
              <p style={{ textAlign: 'center' }}>
                <b>Yay! You have seen it all</b>
              </p>
            }
           >
            {postContent?.Contents?.map((post) => (
              <Posts post={post} key={post.Id} />
            ))}
          </InfiniteScroll>
        </Col>
      </Row>
    </div>


    </Container>

    </Base>
  )
}

export default Userdashboard



step 3:- components-->Posts.jsx:-
import React, { useEffect, useState } from 'react'
import { Link } from 'react-router-dom';
import { Button, Card, CardBody, CardText } from 'reactstrap'
import { isLoggedIn,CurrentUser } from '../auth';
import {DeletePost} from "../services/post-service"; 
import { toast } from "react-toastify";


function Posts({ post = { Title: "This is Default Post Title", Content: "This is Default Content" } }) {

  const[login,setLogin]=useState(false);
  const[user,setUser]=useState(undefined);
const[postDetails,setPostDetails]=useState({
  Id:'',
  userId:''
})

useEffect(()=>
  {
    setLogin(isLoggedIn())
    setUser(CurrentUser())
    setPostDetails({
      Id:post.Id,
      userId:post.userId
    })
    console.log('a user',user);
    console.log('b login',login);
  },[login]
  );



  // Create post function
  const DoDeletePost = (event) => {
    event.preventDefault();
    // Form validation
    if (post.Id=== '') {
      alert('Cintent Id is required!');
      return;
    }
    if (post.userId === '') {
      alert('userId is required!');
      return;
    }

    // Add user ID to post object

    // Submit the post form
    DeletePost(post)
      .then(data => {
        console.log('Post Deleted successfully', data);
         toast.success("Post Deleted successfully!");
        // Reset the form
        setPostDetails({
          Id: "",
          userId: ""
        });
      })
      .catch((error) => {
        toast.error("Post creation failed!");
      });
  };



  return (
    <Card className='border-0 shadow-sm mb-3'>
      <CardBody>
          <Link to="/">Home</Link> /(<Link to=""> {post.CategoryName}</Link>)
 <CardText>
  Posted By <b style={{color:'Green'}}>{post.name}</b> on <b style={{color:'Orange'}} >{new Date(post?.Doe)?.toLocaleDateString()}</b>
</CardText>
        <h4>{post.Title}</h4>
      
        {/* <CardText>{post.Content}</CardText> */}
  <CardText dangerouslySetInnerHTML={{ __html:post?.Content?.substring(0,60)+'..'}}>
    {/* {post.Content.substring(0,30)}... */}
    </CardText>
        <div>
          <Link style={{ height: '19px ',width: '76px ',padding: '0px ', fontSize:'11px',color:'Yellow'}} className='btn btn-secondary border -0' to={'/Post/'+post.Id} >Read More..</Link>

{/* we will show delete button when user is loggedIn else will not show */}
{login?user.Id==post.userId?
<Button onClick={DoDeletePost} color='danger'  className='ms-2' style={{ height: '19px ',width: '76px ',padding: '0px ', fontSize:'11px',color:'Yellow'}}>Delete</Button> :'':''
}
        </div>



      </CardBody>
    </Card>
  );
}

export default Posts;



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



Formal Steps:-
1. Userdashboard.jsx:-

function DoDeletePost(post){
//going to delete post
 console.log(post);
 DeletePost(post)
      .then(data => {
         console.log('Post Deleted successfully', data);
         toast.success("Post Deleted successfully!");
      
      })
      .catch((error) => {
        toast.error("Post creation failed!");
      });
}

->in Userdashboard.jsx we are creating a function name "DoDeletePost",Userdashboard.jsx is our parent component,
->and then we are passing this to the "Posts" as parameter as function(prop drilling)


       {postContent?.Contents?.map((post) => (
              <Posts post={post} key={post.Id} DoDeletePost ={DoDeletePost } />
            ))}
-->

2.Posts.jsx:-

function Posts( { post = { Title: "This is Default Post Title", Content: "This is Default Content" } ,DoDeletePost}) {
and 
using this function on Button click like given below:-

{login && user.Id==post.userId?
<Button onClick={()=>DoDeletePost(post)} color='danger'  className='ms-2' style={{ height: '19px ',width: '76px ',padding: '0px ', fontSize:'11px',color:'Yellow'}}>Delete</Button> :''
}


//

